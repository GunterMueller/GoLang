package dlock

// (c) murus.org  v. 161223 - license see murus.go
//
/* >>> Distributed mutual exclusion due to
       Ricart, G., Agrawala, A. K.:
         An Optimal Algorithm for Mutual Exclusion in Computer Networks
         Commun. ACM 24 (1981), 9-17, 581 */

import (
  "sync"
  "murus/host"
  "murus/nchan"
)
const
  ok = uint(1)
type
  distributedLock struct {
                         uint "number of hosts involved"
                    host []host.Host
                      me uint
                 request,
                   reply [][]nchan.NetChannel
         mutex, critSect sync.Mutex
           time, ownTime,
                nReplies uint
              requesting bool
                deferred []bool
                         }

func new_(me uint, hs []host.Host, port uint16) DistributedLock {
  n := uint(len(hs))
  if n < 2 || me >= n { return nil }
  x := new (distributedLock)
  x.uint = n
  x.deferred = make ([]bool, x.uint)
  x.host = make ([]host.Host, x.uint)
  for i := uint(0); i < x.uint; i++ {
    x.host[i] = hs[i].Clone().(host.Host)
  }
  x.me = me
  x.critSect.Lock()
  x.request = make ([][]nchan.NetChannel, x.uint)
  x.reply = make ([][]nchan.NetChannel, x.uint)
  for i := uint(0); i < x.uint; i++ {
    x.request[i] = make ([]nchan.NetChannel, x.uint)
    x.reply[i] = make ([]nchan.NetChannel, x.uint)
  }
  nxn := x.uint * x.uint
  for i := uint(0); i < x.uint; i++ {
    for j := uint(0); j < x.uint; j++ {
      if i != j && (x.me == i || x.me == j) {
        k := i // x.me == j
        if x.me == i {
          k = j
        }
        p := port + uint16(i * x.uint + j)
        x.request[i][j] = nchan.NewNum (x.ownTime, x.me, k, x.host[k], p)
        x.reply[i][j] = nchan.NewNum (x.ownTime, x.me, k, x.host[k], p + uint16(nxn))
      }
    }
  }
  for i := uint(0); i < x.uint; i++ {
    if i != x.me {
      go func (n uint) { // bookkeeping of requests
        for {
          otherTime := x.request[n][x.me].Recv().(uint)
          x.mutex.Lock()
          if otherTime > x.time {
            x.time = otherTime
          }
          if x.requesting &&
             (x.ownTime < otherTime || (x.ownTime == otherTime && x.me < n)) {
            x.deferred[n] = true
          } else {
            x.reply[x.me][n].Send (ok)
          }
          x.mutex.Unlock()
        }
      }(i)
      go func (n uint) { // bookkeeping of ok-replies
        for {
          _ = x.reply[n][x.me].Recv().(uint)
          x.mutex.Lock()
          x.nReplies++
          if x.nReplies == x.uint - 1 {
            x.critSect.Unlock()
          }
          x.mutex.Unlock()
        }
      }(i)
    }
  }
  return x
}

func (x *distributedLock) Lock() {
  x.mutex.Lock()
  x.requesting = true
  x.ownTime = x.time + 1
  x.nReplies = 0
  x.mutex.Unlock()
  for j := uint(0); j < x.uint; j++ {
    if uint(j) != x.me {
      x.request[x.me][j].Send (x.ownTime)
    }
  }
  x.critSect.Lock()
}

func (x *distributedLock) Unlock() {
  x.mutex.Lock()
  x.requesting = false
  x.mutex.Unlock()
  for j := uint(0); j < x.uint; j++ {
    if x.deferred[j] {
      x.deferred[j] = false
      x.reply[x.me][j].Send (ok)
    }
  }
}
