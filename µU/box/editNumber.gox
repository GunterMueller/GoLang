package box

import (
  . "µU/shape"
  "µU/str"
  "µU/kbd"
  "µU/scr"
)

type
  stati byte; const (
  start = iota
  bp // before '.'
  ap // after '.'
  ee // after 'E', i.e. in exponent
)
var
  status stati

func getStatus (s *string) {
  if _, ok := str.Pos (*s, 'E'); ok {
    status = ee
  } else if _, ok := str.Pos (*s, '.'); ok {
    status = ap
  } else if str.Empty (*s) {
    status = start
  } else {
    status = bp
  }
}

func (b *box) doneNumerical (s *string, x, y uint) bool {
  switch b.Comm {
  case kbd.Enter, kbd.Esc:
    return true
//  case kbd.Left:
//    if b.depth == 0 {
//      if b.index > 0 && leftNotEmpty (s, b.index) {
//        b.index--
//      }
//    } else {
//      return true
//    }
//  case kbd.Right:
//    if b.depth == 0 {
//      if b.index < b.width - 1 {
//        b.index++
//      }
//    }
//    return true
//  case kbd.Down, kbd.Up: 
//    return |
//  case kbd.Pos1:
//    if b.depth == 0 {
//      b.index = 0
//      for {
//        if b.index == b.width { break }
//        if s [b.index] != space { break }
//        b.index++
//      }
//    } else {
//      return true
//    }
//  case kbd.End:
//    if b.depth == 0 {
//      b.index = b.width
//    } else {
//      return true
//    }
  case kbd.Back:
    switch b.depth {
    case 0:
      if b.overwritable {
        if b.index == 0 {
        } else {
          str.Rem (s, b.index - 1, 1)
          *s += " "
        }
      } else if b.index < b.width {
        str.Rem (s, b.index, 1)
        *s += " "
        b.index++
      } else if b.index == b.width {
        str.Rem (s, b.width - 1, 1)
        *s = " " + *s
      }
    case 1:
      *s = str.New (b.width)
      status = start
      b.index = b.width
    default:
      return true
    }
    getStatus (s)
    if b.index < b.width {
      b.write (*s, x, y)
    } else {
      i := b.index
      b.index = 0
      b.write (*s, x, y)
      b.index = i
    }
  case kbd.Del:
    switch b.depth { case 0:
      if b.overwritable {
        if b.index == 0 {
        } else {
          str.Rem (s, b.index - 1, 1)
          *s += " "
        }
      } else if b.index < b.width {
        str.Rem (s, b.index, 1)
        *s += " "
        b.index++
      } else if b.index == b.width {
        str.Rem (s, b.width - 1, 1)
        *s = " " + *s
      }
    case 1:
      *s = str.New (b.width)
      b.index = b.width
    default:
      return true
    }
    if b.index < b.width {
      b.write (*s, x, y)
    } else {
      i := b.index
      b.index = 0
      b.write (*s, x, y)
      b.index = i
    }
//  case kbd.Ins:
//    if b.depth == 0 {
//      if b.overwritable {
//        b.overwritable = false
//      } else if i < b.width {
//        b.overwritable = true
//      }
//    } else {
//      return true
//    }
  case kbd.Help, kbd.Search, kbd.Act, kbd.Cfg, kbd.Mark, kbd.Demark,
       kbd.Cut, kbd.Copy, kbd.Paste, kbd.Red, kbd.Green, kbd.Blue:
    return true
  }
  return false
}

func (b *box) possibleNumerical (s *string, x, y uint) bool {
  if b.index < b.width {
    panic ("uff") // return false
    if b.overwritable { return true }
    if (*s)[b.width - 1] == ' ' {
      // if ! overwritable, shift s one to the right and Write
      str.InsSpace (s, b.index)
      b.write (*s, x, y)
      return true
    }
  } else { // overwritable == false
    i := uint(0)
    for {
      if i + 2 == b.width {
        break
      }
      if (*s)[i] == '0' && (*s)[i + 1] == '0' {
        str.Replace1 (s, i, ' ')
      } else {
        break
      }
      i++
    }
    if (*s)[0] == ' ' {
      if b.width > 1 {
        str.Rem (s, 0, 1)
        *s += " "
      }
      return true
    }
  }
  return false
}

func (B *box) editNumber (imGraphikmodus bool, s *string, x, y uint) {
  var (
    c byte
    cursorshape Shape
    temp uint
    firstTime bool
  )
  B.graphical = imGraphikmodus
//  if B.usesMouse { scr.SwitchMouseCursor (true) }
  str.Norm (s, B.width)
  B.overwritable = ! str.Empty (*s)
  str.Move (s, false)
  B.index = 0
  B.write (*s, x, y)
  B.index = B.width
  firstTime = true
  edited = false
  // Zahl beim ersten Lesen eines Zeichens zurücksetzen, s.u.
  for {
    getStatus (s)
    if B.overwritable {
      cursorshape = Block
    } else {
      cursorshape = Understroke
    }
    if B.graphical {
      scr.WarpGr (x + scr.Wd1() * B.index, y, cursorshape)
    } else {
      scr.Warp (y / scr.Ht1(), x / scr.Wd1() + B.index, cursorshape) // Off
    }
    for {
      c, B.Comm, B.depth = kbd.Read()
      switch c {
      case 0: // Command
        break
      case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
        if firstTime {
          *s = str.New (B.width)
          status = start
          firstTime = false
          edited = true
        }
        if status == start {
          status = bp
          break
        } else if status == ee {
          if temp, ok := str.Pos (*s, 'E'); ok {
            if temp >= B.width - 3 { // not more than 2 digits after 'E'
              break
            }
          }
        } else {
          break
        }
      case '-':
        kbd.DepositCommand (kbd.None)
        kbd.DepositByte (c)
        return
      case  '.', ',':
        if status == bp {
          status = ap
          break
        }
      case 'E', 'e':
if ! B.numerical { println ("Affenkacke") }
        if status == ap && // noch Platz für zwei Zeichen
           (*s)[0] == space && (*s)[1] == space {
          status = ee
          break
        }
      case 'v':
        c = 0
        if status == bp || status == ap {
          temp = 0
          for (*s)[temp] == space { temp++ }
          if (*s)[temp] == '-' {
            str.Replace1 (s, temp, '+')
            break
          } else if (*s)[temp] == '+' {
            str.Replace1 (s, temp, '-')
            break
          } else if temp > 0 {
            str.Replace1 (s, temp - 1, '-')
            break
          }
        }
      default:
   // >>> Besser wäre dies nur für den Fall, dass 'Zeichen' ein Funktionszeichen aus dem Zahlen-Modul ist:
        kbd.DepositCommand (kbd.None)
        kbd.DepositByte (c)
        return
      }
    }
    if B.graphical {
      scr.WarpGr (x + scr.Wd1() * B.index, y, Off)
    } else {
      scr.Warp (y / scr.Ht1(), x / scr.Wd1() + B.index, Off)
    }
    if B.Comm == kbd.None {
      if B.index == B.width {
        if B.overwritable {
          B.overwritable = false
        }
        if c == 0 { // change of sign or exponent
          temp = B.index
          B.index = 0
          B.write (*s, x, y)
          B.index = temp
        } else if B.possibleNumerical (s, x, y) {
          temp = B.index
          B.index = 0
          B.write (*s, x, y)
          B.index = temp
          str.Replace1 (s, B.index - 1, c)
          scr.Lock()
          scr.Colours (B.cF, B.cB)
          if B.graphical {
            scr.Write1Gr (c, int(x + scr.Wd1() * (B.index - 1)), int(y))
          } else {
            scr.Write1 (c, y / scr.Ht1(), x / scr.Wd1() + B.index - 1)
          }
          scr.Unlock()
        } else {
        }
      } else {
        // see editText
      }
    } else {
      if B.doneNumerical (s, x, y) {
        break
      }
    }
  }
// if B.usesMouse { scr.SwitchMouseCursor (false) }
}

/*
func (b *box) editNumber1 (imGraphikmodus bool, s *string, x, y uint) {
  for uint(len (*s)) < b.width { *s = " " + *s }
  b.Write (*s, x, y)
  for *s != "" && (*s)[0] == ' ' { *s = (*s)[1:] }; if *s == " " { *s = "" }
  var c byte
  if b.graphical {
    scr.WarpGr (x + scr.Wd1() * b.width, y, scr.Understroke)
  } else {
    scr.Warp (y / scr.Ht1(), x / scr.Wd1() + b.width, scr.Understroke)
  }
  loop: for {
    l := uint(len (*s))
    c, b.Comm, b.depth = kbd.Read()
    switch b.Comm {
    case kbd.None:
      if char.IsDigit (c) && l < b.width {
        *s += string(c)
      }
    case kbd.Esc:
      break loop
    case kbd.Enter:
      break loop
    case kbd.Back, kbd.Del:
      if l > 0 {
        *s = (*s)[:l-1]
      }
    }
    for uint(len (*s)) < b.width { *s = " " + *s }; b.Write (*s, x, y); for *s != "" && (*s)[0] == ' ' { *s = (*s)[1:] }; if *s == " " { *s = "" }
  }
  if b.graphical {
    scr.WarpGr (x + scr.Wd1() * b.width, y, Off)
  } else {
    scr.Warp (y / scr.Ht1(), x / scr.Wd1() + b.width, Off)
  }
}
*/
