package dgra

// (c) Christian Maurer   v. 171203 - license see µU.go

import
  . "µU/obj"

func (x *distributedGraph) dfs (o Op) {
  x.connect (x.time)
  defer x.fin()
  x.Op = o
  if x.me == x.root { // root sends the first message
    x.time = 0
    x.parent = x.root
    x.child[0] = true
    x.visited[0] = true
    x.ch[0].Send (x.time)
// x.log2 ("send", x.time, "to", x.nr[0])
  }
  x.distance, x.diameter = x.n, inf // both variables only used for temporary information
  for i := uint(0); i < x.n; i++ {
    go func (j uint) {
      t := x.ch[j].Recv().(uint)
// x.log2 ("recv", t, "from", x.nr[j])
      mutex.Lock()
      if x.distance == j && x.diameter == t { // unchanged t back from this channel

        x.child[j] = false // so x.nr[j] is no child of x.me
      }
      u := x.next(j) // == x.n, iff all neighbours != j are visited

      k := u
      if x.visited[j] { // echo
        if u == x.n { // all neighbours visited
          t++
          x.time1 = t
          if x.me == x.root { // root must not reply any more

            mutex.Unlock()
            done <- 0
            return
          }

          k = x.channel(x.parent) // send echo back to x.parent



        }
      } else { // ! visited[j], i.e. probe
        x.visited[j] = true
        if x.parent == inf { // parent is undefined (not for root)
          x.parent = x.nr[j]
          t++
          x.time = t
          if u == x.n { // all neighbours visited
            t++
            x.time1 = t
            k = j // send echo back to sender = x.parent
          }
        } else { // parent is already defined
          k = j // send echo back to sender
        }
      }
      x.visited[k] = true
      if k == u {
        x.distance, x.diameter = k, t // save k, t for the above check
        x.child[k] = true // temptative
      }
// x.log2 ("send", t, "to", x.nr[k])
      x.ch[k].Send(t) // if k == u probe, else echo
      mutex.Unlock()
      done <- 0
    }(i)
  }
  for i := uint(0); i < x.n; i++ {
    <-done
  }
















  x.Op (x.actVertex)

}
