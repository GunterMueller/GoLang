package col

// (c) Christian Maurer   v. 191105 - license see µU.go

//import (
//  "µU/ker"
//  . "µU/obj"
//)
import (
  . "µU/obj"
)
import (
  "µU/ker"
)

func p6Encode (a, p Stream) {
  switch bitDepth {
  case 4:
    // TODO
  case 8:
    // TODO
  case 15:
    // TODO
  case 16: // TODO: might be nonsense, has to be checked !
    p[0] = a[1] << 3
    p[1] = a[0] << 5 + a[1] >> 5 << 5
    p[2] = a[0] >> 3
  case 24, 32:
    p[0] = a[0]
    p[1] = a[2]
    p[2] = a[1]
  default:
    for i := 0; i < P6; i++ {
      p[i] = byte(0)
    }
  }
}

func p6Colour (a Stream) Colour {
q := make (Stream, P6); q[0], q[1], q[2] = a[0], a[1], a[2]
  p := make (Stream, P6)
  p6Encode (a, p)
if q[0] != a[0] { ker.Panic ("col.p6colour: q[0] != a[0]") }
if q[1] != a[1] { ker.Panic ("col.p6colour: q[1] != a[1]") }
if q[2] != a[2] { ker.Panic ("col.p6colour: q[2] != a[2]") }
  return new3 ("", a[0], a[1], a[2])
}
